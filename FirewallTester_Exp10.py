#Test code generated by MISTA

import json
import urllib
import urllib2
import httplib
from scapy.all import *

import unittest

import os, sys, socket, struct, select, time 
from threading import Thread
import simplejson
import logging
import traceback
import string
import requests
import simplejson as json
import csv
import collections
#import TestData 

#import circuitpusher

from mininet.net import Mininet
from mininet.node import OVSSwitch, OVSKernelSwitch, Controller, RemoteController
from mininet.log import setLogLevel, info
from mininet.cli import CLI

import json
import urllib
import time
#from util import *
import httplib


CONTROLLER_URL_PREFIX = 'http://localhost:8080/wm/'
flowdstIP='192.168.1.100'
firewalldstIP='192.168.1.100'
protocol='TCP'
action='ALLOW'

def controller_url(*elements):
 return CONTROLLER_URL_PREFIX + '/'.join(elements)
def test_args(flowdstIP, firewalldstIP, protocol, action):
	 #print self.flowdstIP
    	 flowdstIP=flowdstIP
         firewalldstIP=firewalldstIP
	 protocol=protocol
         action=action
class FirewallTester_Exp10(unittest.TestCase):

	
		
	def setUp(self):
			#TData = TestData.TData()
			#TData.test_args_kwargs('10.0.0.1','10.0.0.1','TCP', 'ALLOW')
			test_args('10.0.0.300','10.0.0.300','TCP', 'ALLOW')
		 	self.controllerIp="127.0.0.1"
			#print "setup"
			self.switch = "00:00:00:00:00:00:00:01"
			#self.destinationIp = "10.0.0.1"
			self.startTime_ = time.time()
			
			self.failed = False
			self.reportStatus_ = True
			self.name_ = "Firewall"
			self.log = logging.getLogger("unittest")
			self.net = Mininet( controller=RemoteController )
			self.CreateNet()
			self.net.start()
			#self.CleanUpFirewallRules()
			#self.readInputs()
			#Precondition.SetPreconditionS1(self)
			#Postcondition.CheckConditionS1(self)
        def CreateNet(self):	

		info( '*** Adding controller\n' )
		self.net.addController( 'c0' , controller=RemoteController,ip= "127.0.0.1", port=6633)

		info( '*** Adding hosts\n' )
		h1 = self.net.addHost( 'h1', ip='10.0.0.1' )
		h2 = self.net.addHost( 'h2', ip='10.0.0.2' )
		h3 = self.net.addHost( 'h3', ip='10.0.0.3' )
		h4 = self.net.addHost( 'h4', ip='10.0.0.4' )
		h5 = self.net.addHost( 'h5', ip='10.0.0.5' )

		info( '*** Adding switch\n' )
		s1 = self.net.addSwitch( 's1' )
		s2 = self.net.addSwitch( 's2' )

		info( '*** Creating links\n' )
		self.net.addLink( h1, s1 )
		self.net.addLink( h2, s1 )
		self.net.addLink( h3, s1 )
		self.net.addLink( h4, s2 )
		self.net.addLink( h5, s2 )
	def tearDown(self):
			if self.failed:
				return
			duration = time.time() - self.startTime_
			#self.cleanup(True)
			if self.reportStatus_:
				self.log.info("=== Test %s completed normally (%d sec)", self.name_, duration)

				self.CleanUpFirewallRules()
				self.clearAllFlows()


	#1	
	def EnableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/enable/json" % self.controllerIp
	  	urllib.urlopen(command)	
		# sleep to time out previous flows in switches
	  	#time.sleep(5)			
	
	#2	
	def DisableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/disable/json" % self.controllerIp
	  	urllib.urlopen(command)
		
	def clearAllFlows(self):
	 command="http://127.0.0.1:8080/wm/staticflowentrypusher/clear/all/json"
	#result = os.popen(command).read()
         #print command + "\n" + result
	 #parsedResult = json.loads(result)
	 x = urllib.urlopen(command).read()
	 if len(x)<3:
	  print "clearing all flows...", x
	  return 0

	def checkFlowTable1(self, dstIP):
	# non static flows
	 command="curl -s http://%s/wm/core/switch/all/flow/json| python -mjson.tool" % ('127.0.0.1:8080')

	 result = os.popen(command).read()
         #print command + "\n" + result
	 parsedResult = json.loads(result)
	 #print parsedResult
	 counter=0
	 
         decision=0
	 for key, value in parsedResult.items():
	  #print "key is" , key
          #print "length value =", len(value)
         # if len(value)>0:
	 #print '\n'.join(value)
          #str1
	  if len(value)>0:
           str1 = ''.join(str(e) for e in value)
           mylist = str1.split(",")
	   for item in mylist:
	    #print "item...", item
	    if 'actions' in item:
	     if 'allow' in item:
              decision= 0
             elif 'deny' in item:
              decision= 1
             else :
	      decision=0
             
	     #print item
	    if 'networkDestination' in item:
	     if dstIP in item:
              #print decision
              return decision
             
            else:
             continue

         return decision    
        def checkFlowTable4(self, dstIP):
	 command="curl -s http://%s/wm/core/switch/all/flow/json| python -mjson.tool" % ('127.0.0.1:8080')
	 #command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         #result = os.popen(command).read()
         #print command + "\n" + result
	 #parsedResult = json.loads(result)

	 x = os.popen(command).read()
         #print command + "\n" + result
	 #parsedResult = json.loads(x)
	 if self.isNoneOrEmptyOrBlankString(x)==False:
		
          parsedResult = json.loads(x)
	  #for i in range(len(parsedResult)):
	  #for key, value in parsedResult.items():
	   #print "key....", key
	   #print "value....", value
	   #print "match...", value['networkDestination']
	  match=''
	   #params = "{\"dstIP\":\"%s\"}" % parsedResult[i]['networkDestination']
	   #command = "/wm/core/switch/all/flow/json"
	   #url = "%s:8080" % self.controllerIp
	   #connection =  httplib.HTTPConnection(url)
	   #connection.request("GET", command, params)
	   #x1=connection.getresponse().read()
	   #rule=json.loads(x)
	   #print "matched rule...", rule
	  action='DENY'
    	  for dpid, flowEntries in parsedResult.items():
	    #print parsedResult['match']
	    print "switch....", dpid
	    #print "flow entry..", flowEntries
            entries = []
	    #print 'flow test...' , flowEntries[0]
            for fe in flowEntries:
	     for key,value in fe.items():
	      actionElem = []
	      #print "fe key...", key
	      #print "fe value...", value
	      if key == 'match':
		for k,v in value.items():
		 #print "match match key", k
		 #print "match match value", v
		 if 'networkDestination' ==str(k):
		 
	          if dstIP ==str(v):
		   print "match entry found for destIP...", dstIP
		   print "matched flow is....", fe
		   #action='ALLOW'
		   #return action
		   match=True
	  #return action
                    #if fe['packetCount'] == 0:
                     #continue
              
	      elif key == 'actions':
		print "action is...", value
		print "action length..", len(value)
		if len(value) > 0:
		 action ='ALLOW'
		 return action
		for i,val in enumerate(value):
		 
		 subact = []
		 for k,v in val.items():
		  subact.append({ 'name' : "%s : %s" % (k, v) })
		  actionElem.append({ 'name' : i+1, 'children' : subact })
		print "actions...", actionElem;
		#temp = str(value)
		#print "actions...", temp
		#if match==True:
		 #print "match action...", temp
		 #if temp.find('DENY'):
		  #action='DENY'
		  #return action
		 #else:
		 #if temp.find('ALLOW'):
		  #action ='ALLOW'
		  #return action
	  return action
		 		
		#for k,v in value.items():
		#temp = str(value)
		#print "action key", temp
		 #print "action value", v

      #try:
                    #thash[dpid][fe['match']['inputPort']]
                     #except KeyError as e:
             #entries.append(fe)
             #srcs[dpid] = entries
	     #print srcs
             #return srcs

                  #print "dpidddd", dpid, "fessss", fes
		  #for i in range(len(fes)):
		        #print "rule...",i,"...", parsedResult[i][0]
			#params = "{\"dstIP\":\"%s\"}" % parsedResult[i]['networkDestination']
			#command = "/wm/firewall/rules/json"
			#url = "%s:8080" % self.controllerIp
			#connection =  httplib.HTTPConnection(url)
			#connection.request("GET", command, params)
			#x1=connection.getresponse().read()
			#rule=json.loads(x)
			#print "matched rule ...", parsedResult[i]['nw_dst_prefix']
			#temp1= str(parsedResult[i])
		#	temp1=fes[i]['action']
		 #       print "temp1...", temp1
		#	if temp1.find(firewalldst):
		#	 if 'ALLOW' in parsedResult[i]['action']:
			 #if temp1.find('ALLOW'):
		#	  print "allow traffic"
		#	  decision='ALLOW'
		#	  self.addFlowAllow(flowdstIP)
		#	  print "matched rule...", rule
		#	  print " matched decision", decision
		#	  return decision
		#	  break
			 #elif temp1.find('DENY'):
		#	 elif 'DENY' in parsedResult[i]['action']:
		#	  print "deny traffic"
		#	  decision='DENY'
		#	  self.addFlowDeny(flowdstIP)
		#	  print "matched rule...", rule
		#	  print " matched decision", decision
		#	  return decision
		#	  break
	#		else:
	#		 continue
        def checkFlowTable2(self, dstIP):
	# non static flows
	 command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         result = os.popen(command).read()
         #print command + "\n" + result
	 parsedResult = json.loads(result)
	 #print parsedResult
	 counter=0
	 
         decision= False
	 for key, value in parsedResult.items():
	  #print "key is" , key
         
	  if len(value)>0:
           #str1 = ''.join(str(e) for e in value)
	   str1=str(value)
	   #print  str1
           
             
	     #print item
	   if 'networkDestination' in str1:
	     #print 'networkDestination'
	     #print "check if...", dstIP, '.... is in string'
	     #if dstIP in str1:
	     if str1.find(dstIP):
	      #print ("dstIP is in string")
	      decision=True
              #print decision
              return decision
         return decision     
            

         return decision 
	
	def getallflows1(self):
	 
	 command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         result = os.popen(command).read()
         #print command + "\n" + result
         return result
	#def __init__(self, flowdstIP, firewalldstIP, protocol, action):
         #self.flowdstIP=flowdstIP
         #self.firewalldstIP=firewalldstIP
	 #self.protocol=protocol
         #self.action=action

	def test01(self) :
		print "Test case -1"
		self.EnableFirewall()
		print "enabling the firewall"
		self.assertEqual(self.CheckFirewallStaus(), True)
		#self.addFirewallRule('10.0.0.3')
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		#self.CheckFirewallStaus()
	        #self.getallflows()
		self.prepareFlow(flowdstIP)
		#self.prepareFlow(flowdstIP)
		
		#self.getflowIzz()
		self.assertEqual(self.add_firewall_ruleAllow(firewalldstIP), True)
		#self.assertTrue(self.readFirewallRule(firewalldstIP))
		#self.addFlow('flowdstIP')
		#self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		self.assertEqual(self.insertFlowRuleNoFirewallRules(firewalldstIP),1)
		#self.assertEqual(self.readFirewallRule(firewalldstIP), firewalldstIP)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		#self.assertEqual(self.checkFlowTable2(flowdstIP), 1)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		#self.getallflows()
	def test00(self) :
		print "Test case 00"
		
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')
		self.DisableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), False)
		#self.CheckFirewallStaus()
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		#self.pushflow1(flowdstIP)
		self.prepareFlow(flowdstIP)
		#self.addFlow(flowdstIP)
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')
	def test0(self) :
		print "Test case 0"
		self.DisableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), False)
		self.CheckFirewallStaus()
		#self.pushflow1(flowdstIP)
		self.prepareFlow(flowdstIP)
		#self.addFlow('10.0.0.l')
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')
	def test1(self) :
		print "Test case 1"
		self.EnableFirewall()
		print "enabling the firewall"
		#self.addFirewallRule('10.0.0.3')
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.CheckFirewallStaus()
	        #self.getallflows()
		self.prepareFlow(flowdstIP)
		self.prepareFlow(flowdstIP)
		
		#self.getflowIzz()
		self.assertEqual(self.add_firewall_ruleAllow(firewalldstIP), True)
		#self.assertTrue(self.readFirewallRule(firewalldstIP))
		#self.addFlow('10.0.0.3')
		#self.assertEqual(self.checkFlow2('10.0.0.3'), '10.0.0.3')
		self.assertEqual(self.insertFlowRuleNoFirewallRules(flowdstIP),1)
		#self.assertEqual(self.readFirewallRule(firewalldstIP), firewalldstIP)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		#self.assertEqual(self.checkFlowTable2('10.0.0.3'), 1)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		#self.getallflows()

	def test2(self) :
		print "Test case 2"
		print "enabling the firewall"
		self.EnableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), True)
		print "disbling the firewall"
		self.DisableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), False)
		self.assertEqual(self.add_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.prepareFlow(flowdstIP)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
	        #self.getallflows()
	
	
	def test3(self) :
		print "Test case 3"
		self.EnableFirewall()
		#self.CleanUpFirewallRules()
		self.assertEqual(self.CheckFirewallStaus(), True)
		self.assertEqual(self.add_firewall_ruleAllow(firewalldstIP), True)
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		#self.assertEqual(self.CheckCountFirewallRules(),0)
		self.addFlow(flowdstIP)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		self.insertFlowRuleNoFirewallRules(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		#self.getallflows1()
		#self.CountFirewallRules()
	

	def test4(self) :
		print "Test case 4"
		self.EnableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), True)
		self.assertEqual(self.add_firewall_rule2(firewalldstIP, 'DENY'), True)
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.DisableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), False)
		self.addFlow(flowdstIP)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		#self.getallflows1()

		
	

	def test5(self) :
		print "Test case 5"
		self.EnableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), True)
		self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))
		self.DisableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), False)
		self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))
		

	def test6(self) :
		print "Test case 6"
		self.EnableFirewall()
		self.addFlow(flowdstIP)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.CheckFirewallStaus(), True)
		self.assertTrue(self.checkMatch(flowdstIP, flowdstIP))
		self.assertEqual(self.insertFlowRuleCheckFirewallWMatch(flowdstIP,firewalldstIP), 'DENY')
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		#self.assertEqual(self.add_firewall_rule2(firewalldstIP, 'ALLOW'), True)
		#self.assertEqual(self.CheckFirewallStaus(), True)
		#self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))
		#self.assertEqual(self.insertFlowRuleCheckFirewallWMatch(flowdsttIP,firewalldstIP), 'ALLOW')
		#self.assertEqual(self.checkFlowTable4(firewalldstIP), 'ALLOW')

	def test7(self) :
		print "Test case 7"
		self.DisableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), False)
		self.addFlow(flowdstIP)
		#self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		self.insertFlowRuleFirewallOff(flowdstIP)
		#self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')
		self.assertEqual(self.add_firewall_rule4(firewalldstIP,'10.0.0.2','DENY','TCP'), True)
		#self.deleteFirewallRule(firewalldstIP)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		#self.assertEqual(self.checkFlowTable4(flowdstIP), 'DENY')
		
	

	def test8(self) :
		print "Test case 8"
		#self.deleteFirewallRule(firewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.add_firewall_rule2(firewalldstIP, 'ALLOW'), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		self.EnableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), True)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)		

		
	

	def test9(self) :
		print "Test case 9"
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.deleteFirewallRule('10.0.0.2')
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')

	def test09(self) :
		print "Test case 09"
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.deleteFirewallRule('10.0.0.2')
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')

		

	def test10(self) :
		print "Test case 10"
		self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))
		self.EnableFirewall()
		self.assertEqual(self.CheckFirewallStaus(), True)
		self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))



	def test11(self) :
		print "Test case 11"
		self.EnableFirewall()
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_rule4(firewalldstIP,'10.0.0.2','ALLOW','TCP'), True)
		#self.deleteFirewallRule('10.0.0.l')
		#self.assertEqual(self.delete_firewall_rule('10.0.0.1'), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		#self.assertTrue(checkConditionS1(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	

	def test12(self) :
		print "Test case 12"
		self.addFlow(flowdstIP)
		#self.assertTrue(checkConditionS5(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
		self.EnableFirewall()
		#self.assertTrue(checkConditionS1(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	

	def test13(self) :
		print "Test case 13"
		self.addFlow(flowdstIP)
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		#self.AddNewFirewallRules1Deny('10.0.0.l')
		self.assertEqual(self.add_firewall_rule3(firewalldstIP,'Deny','TCP'), True)
		self.assertEqual(self.add_firewall_rule3(firewalldstIP,'ALLOW','UDP'), True)
		
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		#self.deleteFirewallRule('10.0.0.l')
		#self.assertEqual(self.delete_firewall_rule('10.0.0.1'), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		self.assertEqual(self.checkFlow2(flowdstIP), flowdstIP)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
	

	def test14(self) :
		print "Test case 14"
		self.addFlow(flowdstIP)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_rule2(firewalldstIP,'Drop'), True)
		#self.assertTrue(checkConditionS5(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
		self.EnableFirewall()
		#self.assertTrue(checkConditionS1(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	

	def test15(self) :
		print "Test case 15"
		self.addFlow(flowdstIP)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.insertFlowRuleFirewallOff(flowdstIP)
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertEqual(self.checkFlowTable4(flowdstIP), 'ALLOW')
	

	def test16(self) :
		print "Test case 16"
		self.addFlow(flowdstIP)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.deleteFirewallRule(firewalldstIPfirewalldstIP)
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		#self.assertTrue(checkConditionS5(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	

	def test17(self) :
		print "Test case 17"
		self.addFlow(flowdstIP)
		#self.AddNewFirewallRules1Deny(firewalldstIP)
		self.assertEqual(self.add_firewall_rule3(firewalldstIP, 'Drop', 'ICMP'), True)
		self.checkMatch(flowdstIP, flowdstIP)
		#self.assertTrue(checkConditionS5(self))
		self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))
		self.EnableFirewall()
		#self.assertTrue(checkConditionS1(self))
		self.assertTrue(self.checkMatch(flowdstIP, firewalldstIP))
	

	def test18(self) :
		print "Test case 18"
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.assertTrue(checkConditionS5(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
		self.EnableFirewall()
		#self.assertTrue(checkConditionS1(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	

	def test19(self) :
		print "Test case 19"
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.addFlow(flowdstIP)
		#self.assertTrue(checkConditionS5(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	

	def test20(self) :
		print "Test case 20"
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		self.assertEqual(self.add_firewall_ruleDeny(firewalldstIP), True)
		#self.deleteFirewallRule('10.0.0.l')
		#self.assertEqual(self.delete_firewall_rule(firewalldstIP), True)
		self.assertEqual(self.CleanFirewallRule1(firewalldstIP), True)
		#self.assertTrue(checkConditionS5(self))
		self.assertEqual(self.get_firewall_rule(firewalldstIP), firewalldstIP)
		self.assertTrue(self.getFlow(flowdstIP))
	
	def insertFlowRuleCheckFirewallWMatch(self, flowdstIP, firewalldst):
	 #decision=self.get_firewall_rule1(firewalldst)
	 #return decision
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 
	 #print(isNoneOrEmptyOrBlankString(x))
	 if self.isNoneOrEmptyOrBlankString(x)==False:
		
		parsedResult = json.loads(x)
		rule=[]
		decision=''
		for i in range(len(parsedResult)):
		        print "rule...",i,"...", parsedResult[i]
			params = "{\"nw_dst_prefix\":\"%s\"}" % parsedResult[i]['nw_dst_prefix']
			command = "/wm/firewall/rules/json"
			url = "%s:8080" % self.controllerIp
			connection =  httplib.HTTPConnection(url)
			connection.request("GET", command, params)
			x1=connection.getresponse().read()
			rule=json.loads(x)
			#print "matched rule ...", parsedResult[i]['nw_dst_prefix']
			temp1= str(parsedResult[i])
		        print "temp1...", temp1
			if temp1.find(firewalldst):
			 if 'ALLOW' in parsedResult[i]['action']:
			 #if temp1.find('ALLOW'):
			  print "allow traffic"
			  decision='ALLOW'
			  self.addFlowAllow(flowdstIP)
			  print "matched rule...", rule
			  print " matched decision", decision
			  command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         		  result = os.popen(command).read()
        		  parsedResult = json.loads(result)
			  print "inserted flow..."
			  for dpid, flowEntries in parsedResult.items():
	    #print parsedResult['match']
	    		   print "switch....", dpid
	    #print "flow entry..", flowEntries
                           entries = []
	    #print 'flow test...' , flowEntries[0]
             		   for fe in flowEntries:
	     		    for key,value in fe.items():
	      		     actionElem = []
	      	      	     if key == 'match':
			      for k,v in value.items():
				print k,v
	 		  
			  return decision
			  break
			 #elif temp1.find('DENY'):
			 elif 'DENY' in parsedResult[i]['action']:
			  print "deny traffic"
			  decision='DENY'
			  self.addFlowDeny(flowdstIP)
			  print "matched rule...", rule
			  print " matched decision", decision
			#  command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         		 # result = os.popen(command).read()
         		  #parsedResult = json.loads(result)
	 		  #print "inserted flow..."
			  
			  #for dpid, flowEntries in parsedResult.items():
	    #print parsedResult['match']
	    		  # print "switch....", dpid
	    #print "flow entry..", flowEntries
                           #entries = []
	    #print 'flow test...' , flowEntries[0]
             		  # for fe in flowEntries:
	     		  #  for key,value in fe.items():
	      		   #  actionElem = []
	      	      	    # if key == 'match':
			     # for k,v in value.items():
				#print k,v
			  return decision
			  break
			else:
			 continue
		

	def getflowIzz(self):
	  command="curl -s http://%s/wm/core/switch/all/flow/json| python -mjson.tool" % (self.controllerIp)
	  result = os.popen(command).read()
	  #print command + "\n"
	def pushflow1(self, dstIP):
	 #command = "curl -s http://%s/wm/device/?ipv4=%s" % (self.controllerIp, dstIP)
	 #command='curl -s http://127.0.0.1:8080/wm/device/?ipv4=10.0.0.3'
	 temp= 'http://127.0.0.1:8080/wm/device/?ipv4='+ dstIP
	 command='curl -s ' + temp
    	 result = os.popen(command).read()
	 #print "res" , result
    	 parsedResult = simplejson.loads(result)
    	 #print command+"\n" , parsedResult
	def pushflow(self, dstIP):
	  command = "curl -s -d '{\"switch\": \"%s\", \"name\":\"%s\", \"src-ip\":\"%s\", \"dst-ip\":\"%s\", \"ether-type\":\"%s\", \"cookie\":\"0\", \"priority\":\"500\", \"ingress-port\":\"%s\",\"active\":\"true\", \"actions\":\"output=%s\"}' http://%s/wm/staticflowentrypusher/json" % ("00:00:00:00:00:00:00:01", "00:00:00:00:00:00:00:01"+"."+"test"+".f", '10.0.0.4', dstIP, "0x800", '1', '2', self.controllerIp)
          result = os.popen(command).read()
          #print command

	def insertFlowRuleNoFirewallRules(self, dstIP):
         if self.CheckFirewallStaus() is True :
           print "firewall is enabled"
	   x= self.addFlowDeny(dstIP)
	   y=str(x)
	   print "Flow insertion return is.." , y
	   if y.find('Entry pushed') :
            x1=1
            #print "deny", x1
	    return x1 
	 else: 
	    print "firewall disabled"
	    self.addFlowAllow(dstIP)
	 command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         result = os.popen(command).read()
         parsedResult = json.loads(result)
	 print "inserted flow...", parsedResult

	def insertFlowRuleNoFirewallRulesDeny(self, dstIP):
         if self.CheckFirewallStaus() is True :
	   print "insert with deny"
	 else: 
	   print "insert with permit"
	   # decision = 'DENY'
	   decision = "Drop"
	   flow1 = {
		    'switch':"00:00:00:00:00:00:00:01",
		    "name":"TestFlow",
		    "cookie":"0",
		    "priority":"500",
		    "--timeout":"50000",
		    "ingress-port":1,
			"egress-port":2,
		    "src-ip": "10.0.0.1",
		     "ether-type":"2048",
                     "dst-ip":dstIP,
		   # "dst-ip":"10.0.0.2",
		    "active":"true",
		    "actions":decision
		    # "actions":"set-dst-port=2"
		    }

	   path = '/wm/staticflowentrypusher/json'
           headers = {
            'Content-type': 'application/json',
            'Accept': 'application/json',
            }
	   action = 'POST'
           body = json.dumps(flow1)
           conn = httplib.HTTPConnection(self.controllerIp, 8080)
           conn.request(action, path, body, headers)
           response = conn.getresponse()
	   #print('response...', response)
	   ret = (response.status, response.reason, response.read())
	#json.loads(ret)
	   conn.close()
	   #print "Create Flow"
           #print ret
         
	def checkMatch(self, flowdestIP, firewalldestIP):
         #print "checkMatch"
         if self.isNoneOrEmptyOrBlankString(flowdestIP)==False:
	  if self.isNoneOrEmptyOrBlankString(firewalldestIP)==False:
           if flowdestIP is firewalldestIP:
            #print "check"
            #print "flow" , flowdestIP
	    #self.insertFlowRuleCheckFirewallWMatch(flowdestIP)
	    #print "end insert"
	    return True
           else : 
            #self.insertFlowRuleCheckFirewallWoutMatch(flowdestIP)
	    return False
	 
                     
	def readFirewallRule1(self, destIP):
         print "start reading   destIP == ", destIP
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 
         if isNoneOrEmptyOrBlankString(command)==False:
          x = urllib.urlopen(command).read()
	  parsedResult = json.loads(x)
          #print "res" , parsedResult
	  if isNoneOrEmptyOrBlankString(parsedResult)==False:
	   for i in range(len(parsedResult)):
	    params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
	    command = "/wm/firewall/rules/json"
	    url = "%s:8080" % self.controllerIp
	    connection = httplib.HTTPConnection(url)
	    connection.request("GET", command, params)
	    x = connection.getresponse().read()
	    return x
	  #else:
           #return '0.0.0.0'
           
   
	def readFirewallRule(self, destIP):
         print "start reading   destIP == ", destIP
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 
         if isNoneOrEmptyOrBlankString(command)==False:
          x = urllib.urlopen(command).read()
	  parsedResult = json.loads(x)
          #print "firewall rules" , parsedResult
	  if isNoneOrEmptyOrBlankString(parsedResult)==False:
	   for i in range(len(parsedResult)):
	    params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
	    command = "/wm/firewall/rules/json"
	    url = "%s:8080" % self.controllerIp
	    connection = httplib.HTTPConnection(url)
	    connection.request("GET", command, params)
	    x = connection.getresponse().read()
	    #print "final x", x
	    return x
	 # else:
          # return '0.0.0.0'	
	def CheckFirewallStaus(self):
	 command = "http://%s:8080/wm/firewall/module/status/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 parsedResult = json.loads(x)
	#print("parsedResult")
	 #print("firewall is...." , parsedResult)
	 if("enabled" in parsedResult['result']):
	#if("enabled" in x):
		print "firewall is enabled"
		return True		
	 elif("disabled" in parsedResult['result']):
	#elif("disabled" in x):
		print "firewall is disabled"	
		return False
	 else: 
		return False	

	def getFlow(self, destIP):
	#print("change me")
         #print destIP	
	 outp = "ALLOW"
	 flow1 = {
		    'switch':"00:00:00:00:00:00:00:01",
		    "name":"TestFlow",
		    "cookie":"0",
		    "priority":"500",
		    "--timeout":"500000",
		    "ingress-port":1,
			"egress-port":2,
		    "src-ip": "10.0.0.1",
		     "ether-type":"2048",
                     "dst-ip":destIP,
		   # "dst-ip":"10.0.0.2",
		    "active":"true",
		    #actions":outp
		     "actions":"set-dst-port=2"
		    }
	 #print flow1	
	 return flow1
	def getF(self, dstIP):
	 #ret = self.rest_call({}, 'GET')
	 ret = self.rest_call1(dstIP, 'GET')
         
	 return json.loads(ret[2])
	 #return ret
	def rest_call_decision(self, dstIP, action):
	 path = '/wm/staticflowentrypusher/json'
	 headers = {
'Content-type': 'application/json',
'Accept': 'application/json',
}
	 body = json.dumps(dstIP)
	 conn = httplib.HTTPConnection(self.controllerIp, 8080)
         conn.request(action, path, body, headers)
         response = conn.getresponse()
         ret = (response.status, response.reason, response.read())
	
	 #print ret
	 conn.close()
	 return ret 
	def rest_call(self, dstIP):
	 path = '/wm/staticflowentrypusher/json'
	 headers = {
'Content-type': 'application/json',
'Accept': 'application/json',
}
	 body = json.dumps(dstIP)
          
	 tokens = body.split(',')
	 
	 return tokens 
	def rest_call2(self, dstIP):
	 path = '/wm/staticflowentrypusher/json'
	 headers = {
'Content-type': 'application/json',
'Accept': 'application/json',
}
	 body = json.dumps(dstIP)
	 
	 return body
	def rest_call1(self, flow, action):
	 path = '/wm/staticflowentrypusher/json'
	 #path= '/wm/core/controller/switches/json'
	 headers = {
'Content-type': 'application/json',
'Accept': 'application/json',
}
	 print "rest_call1.."
	 body = json.dumps(flow)
	 tokens = body.split(',')
 	 conn = httplib.HTTPConnection(self.controllerIp, 8080)
         conn.request(action, path, body, headers)
         response = conn.getresponse()
         ret = (response.status, response.reason, response.read())
	 if action == 'PUSH':
	  print 'result of pushing....', ret 
	 elif action == 'GET':
	  print 'result of getting....', ret
	 
	 conn.close()
	 return ret
         
	flow1 = {
'switch':"00:00:00:00:00:00:00:01",
"name":"flow-mod-1",
"cookie":"0",
"priority":"500",
"ingress-port":"3",
"egress-port":'2',
"active":"true",
"src-ip": "10.0.0.1",
		     "ether-type":"2048",
                     "dst-ip":'10.0.0.3',
"actions":"output=4"
}

	
	def listofswitches(self):
 #List all OF switches controlled by the Controller
	 fl_listswitches = 'http://127.0.0.1:8080/wm/core/controller/switches/json'

  # Do the GET in HTTP and return the Floodlight returned values
	 return requests.get(fl_listswitches)
	def checkFlow2(self, dstIP):
	 #self.getF(dstIP)
	 res=self.rest_call2(dstIP)
	 #res=self.rest_call1({}, 'GET')
	 
	 
	 abc=''.join(res)
	 abc=abc.replace('"', '')
	 
	 return abc
	
	def CheckFlowTable(self, dstIP):
	 self.getFlows(dstIP)
	def CheckFlowTable10(self, dstIP):
	 res1=self.rest_call_decision({}, 'GET')
	 
	 return res1

	def checkFlowWithDecision2(self, dstIP):
	 params = urllib.urlencode({'dst-ip':dstIP})
         params1= urllib.urlencode({'inetAddress':dstIP})
	 url='http://127.0.0.1:8080/wm/core/controller/switches/json'
	 url1= controller_url(params1)
         url2= 'http://127.0.0.1:8080/wm/staticflowentrypusher/json'
	 response=  urllib2.urlopen(url)
	 html = response.read()
         #print html
	 return html
	def prepareFlow(self, dstIP):
	 flow7 =	{
			'switch':"00:00:00:00:00:00:00:01",
			"name":"flow-mod-7",
			"cookie":"0",
			"priority":"500",
			"ingress-port":"1",
			"egress-port":"2",
			#"src-mac":"00:17:31:f8:5c:3c",
			#"dst-mac":"00:0c:6e:01:0c:ef",
			"src-ip":"10.0.0.1",
			"dst-ip":dstIP,
			"ether-type":"2048",
			"active":"true",
			#"actions":"ALLOW"
			"actions":"set-dst-port=2"
	}
	 return flow7

	def addFlowDeny(self, dstIP):



		flow8 =	{
			'switch':"00:00:00:00:00:00:00:02",
			"name":"flow-mod-8",
			"cookie":"0",
			"priority":"500",
			"ingress-port":"2",
			"egress-port":"2",
			#"src-mac":"00:17:31:f8:5c:3c",
			#"dst-mac":"00:0c:6e:01:0c:ef",
			"src-ip":"10.0.0.1",
			"dst-ip":dstIP,
			"ether-type":"2048",
			"active":"true",
			"actions":"Drop"
	}
 		ret= self.setFlow(flow8)
		#if 'Entry pushed' in ret:
		print "flow insertion ", ret
	        return ret
	def addFlowAllow(self, dstIP):
		flow =	{
			'switch':"00:00:00:00:00:00:00:01",
			"name":"flow-mod-5",
			"cookie":"0",
			"priority":"500",
			"ingress-port":"1",
			"egress-port":"2",
			#"src-mac":"00:17:31:f8:5c:3c",
			#"dst-mac":"00:0c:6e:01:0c:ef",
			#"src-ip":"10.0.0.1",
			"dst-ip":dstIP,
			"ether-type":"2048",
			"active":"true",
			#"actions":"Drop"
			#"actions":"set-dst-port=2"
			"actions":"set-dst-port=3"
	}
 		ret= self.setFlow(flow)
		print "flow insertion ", ret
		#if 'Entry pushed' in ret:
	        return ret
	def addFlowAllow4(self, flow):
		
 		ret= self.setFlow(flow)
		print "flow insertion ", ret
		#if 'Entry pushed' in ret:
	        return ret
	def addFlow(self, dstIP):

 		flow7 =	{
			'switch':"00:00:00:00:00:00:00:01",
			"name":"flow-mod-8",
			"cookie":"0",
			"priority":"500",
			"ingress-port":"2",
			"egress-port":"3",
			#"src-mac":"00:17:31:f8:5c:3c",
			"dst-mac":"00:0c:6e:01:0c:ef",
			"src-ip":"10.0.0.1",
			"dst-ip":dstIP,
			"ether-type":"2048",
			"active":"true",
			#"actions":"ALLOW"
			"actions":"set-dst-port=2"
	}
 		ret= self.setFlow(flow7)
		print "flow insertion ", ret
		#if 'Entry pushed' in ret:
	        return ret
	def setFlow(self, data):
	 print "pushing flow ..." , data
         ret = self.rest_call1(data, 'POST')
	 return ret
         
	def getFlows(self, data):
	 
  	 ret = self.rest_call1({}, 'GET')
	 
         return json.loads(ret[2])
	def checkFlowTable3(self, dstIP):
	 flow1 =	{
			'switch':"00:00:00:00:00:00:00:02",
			"name":"flow-mod-8",
			"cookie":"0",
			"priority":"500",
			"ingress-port":"2",
		
			"egress-port":"1",
			"src-mac":"00:17:31:f8:5c:3c",
			"dst-mac":"00:0c:6e:01:0c:ef",
			"src-ip":"10.0.0.1",
			"dst-ip":dstIP,
			"ether-type":"2048",
			"active":"true",
			"actions":"set-dst-port=2"}
			#"actions":"DENY"}
	 x=self.getFlows(flow1)
	 
	 return x
	def checkFlow1(self, dstIP):
	
	 outp = "output=" + "flood"
	 flow1 = {
		    'switch':"00:00:00:00:00:00:00:01",
		    "name":"TestFlow",
		    "cookie":"0",
		    "priority":"500",
		    "--timeout":"500000",
		    "ingress-port":1,
		"egress-port":2,
		    "src-ip": "10.0.0.1",
		     "ether-type":"2048",
                     "dst-ip":dstIP,
		   # "dst-ip":"10.0.0.2",
		    "active":"true",
		    #"actions":outp
		     "actions":"set-dst-port=2"
		    }
	 	
	 return flow1

	

	def insertFlowRuleFirewallOff(self,dstIP ):
	 flow=self.prepareFlow(dstIP)
	 x=self.addFlowAllow4(flow)
	 y=str(x)
	 print "Flow insertion return is.." , y
	 command="curl -s http://%s/wm/core/switch/all/flow/json| python -mjson.tool" % ('127.0.0.1:8080')
	 #command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         #result = os.popen(command).read()
         #print command + "\n" + result
	 #parsedResult = json.loads(result)

	 x = os.popen(command).read()
         #print command + "\n" + result
	 #parsedResult = json.loads(x)
	 print "retreived flows..", x
	 if self.isNoneOrEmptyOrBlankString(x)==False:
		
          parsedResult = json.loads(x)
	  #for i in range(len(parsedResult)):
	  #for key, value in parsedResult.items():
	   #print "key....", key
	   #print "value....", value
	   #print "match...", value['networkDestination']
	  match=''
	   #params = "{\"dstIP\":\"%s\"}" % parsedResult[i]['networkDestination']
	   #command = "/wm/core/switch/all/flow/json"
	   #url = "%s:8080" % self.controllerIp
	   #connection =  httplib.HTTPConnection(url)
	   #connection.request("GET", command, params)
	   #x1=connection.getresponse().read()
	   #rule=json.loads(x)
	   #print "matched rule...", rule
	  action='DENY'
    	  for dpid, flowEntries in parsedResult.items():
	    #print parsedResult['match']
	    print "switch....", dpid
	    #print "flow entry..", flowEntries
            entries = []
	    #print 'flow test...' , flowEntries[0]
            for fe in flowEntries:
	     for key,value in fe.items():
	      actionElem = []
	      #print "fe key...", key
	      #print "fe value...", value
	      if key == 'match':
		for k,v in value.items():
		 #print "match match key", k
		 #print "match match value", v
		 if 'networkDestination' ==str(k):
		 
	          if dstIP ==str(v):
		   print "match entry found for destIP...", dstIP
		   print "matched flow is....", fe
	
	def insertFlowRuleFirewallOff2(self, dstIP):
	 self.addFlowAllow(dstIP)
	 command="http://%s:8080/wm/staticflowentrypusher/list/all/json" % self.controllerIp
	 y = urllib.urlopen(command).read()
	 parsedResult = json.loads(y)
	 foundSwitches = dict(parsedResult)
	 expectedSwitches = ["00:00:00:00:00:00:00:1%c" % x for x in ['1', '2', '3', '4', '9', 'd', 'f']]
	 print "found seitches..", foundSwitches
	 for key in expectedSwitches:
	  if foundSwitches.has_key(key):
           flowEntries = dict(parsedResult.get(key))
	   print "flow entries...", flowEntries


	def insertFlowRuleFirewallOff1(self, dstIP):
	 self.addFlowAllow(dstIP)
	 #command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
	 command="curl -s http://%s/wm/core/switch/all/flow/json| python -mjson.tool" % ('127.0.0.1:8080')
         result = os.popen(command).read()
         parsedResult = json.loads(result)
	 print "inserted flow...", parsedResult
	 for dpid, flowEntries in parsedResult.items():
	    #print parsedResult['match']
	    		   print "switch....", dpid
	                   print "flow entry..", flowEntries
                           entries = []
	    #print 'flow test...' , flowEntries[0]
             		   for fe in flowEntries:
			    print "fee", fe
			#    for key, value in fe:
			
	     		    #for key,value in fe.items():
	      		 #    actionElem = []
	      	      	  #   if key == 'match':
			   #   for k,v in value.items():
				#print k,v

	def firewallTable(dstIP,self):
		command = "/wm/firewall/rules/json"
		controllerIp='127.0.0.1'
		#command = "http://%s:8080/wm/firewall/rules/json" % controllerIp
		#url = "%s:8080" % self.controllerIp
                url='http://127.0.0.1:8080'
		#command = "/wm/firewall/rules/json"
                #url = "%s:8080" % controllerIp
		connection = httplib.HTTPConnection(url)
		params = dstIP #"{\"src-ip\":\"10.0.0.3/32\"}"
		connection.request("GET", command, params)
		connection.getresponse().read()
	
	def AddNewFirewallRules(self):
	 command = "/wm/firewall/rules/json"
	 url = "%s:8080" % self.controllerIp
	 connection =  httplib.HTTPConnection(url)

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\"10.0.0.3/32\",\"dl-type\":\"ARP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\"10.0.0.1/32\",\"dl-type\":\"ARP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\"10.0.0.3/32\",\"nw-proto\":\"ICMP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\"10.0.0.1/32\",\"nw-proto\":\"ICMP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()
	def AddNewFirewallRules1(self, destIP):
	 command = "/wm/firewall/rules/json"
	 url = "%s:8080" % self.controllerIp
	 connection =  httplib.HTTPConnection(url)

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\destIP,\"dl-type\":\"ARP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\destIP,\"dl-type\":\"ARP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\destIP,\"nw-proto\":\"ICMP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\destIP,\"nw-proto\":\"ICMP\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()
	def AddNewFirewallRules1Deny(self, destIP):
	 command = "/wm/firewall/rules/json"
	 url = "%s:8080" % self.controllerIp
	 connection =  httplib.HTTPConnection(url)

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\destIP,\"dl-type\":\"ARP\",\"action\":\"deny\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\destIP,\"dl-type\":\"ARP\",\"action\":\"deny\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\destIP,\"nw-proto\":\"ICMP\",\"action\":\"deny\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\destIP,\"nw-proto\":\"ICMP\",\"action\":\"deny\"}"
	 connection.request("POST", command, params)
	 connection.getresponse().read()
	def AddNewFirewallRules1Allow(self, destIP):
	 command = "/wm/firewall/rules/json"
	 url = "%s:8080" % self.controllerIp
	 connection =  httplib.HTTPConnection(url)

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\destIP,\"dl-type\":\"ARP\",\"action\":\"allow\"}"
	 connection.request("POST", command, params)
	 x1=connection.getresponse().read()
	 #print "x1.." , x1

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\destIP,\"dl-type\":\"ARP\",\"action\":\"allow\"}"
	 connection.request("POST", command, params)
	 x2=connection.getresponse().read()
	 #print "x2.." , x2

	 params = "{\"src-ip\":\"10.0.0.1/32\",\"dst-ip\":\destIP,\"nw-proto\":\"ICMP\",\"action\":\"allow\"}"
	 connection.request("POST", command, params)
	 x3=connection.getresponse().read()
	 #print "x3.." , x3

	 params = "{\"src-ip\":\"10.0.0.3/32\",\"dst-ip\":\destIP,\"nw-proto\":\"ICMP\",\"action\":\"allow\"}"
	 connection.request("POST", command, params)
	 x4=connection.getresponse().read()
	 #print "x4.." , x4
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp 
	 x=urllib.urlopen(command).read() 
	 #print "adding a firewall rule..." , x	
	def goto(self, linenum):
    	 global line
    	 line = linenum
	def isNoneOrEmptyOrBlankString(self, myString):
	 myString=str(myString)
         if myString:
            if not myString.strip():
                return True
         else:
            return True

         return False
	def CleanUpFirewallRules(self):
	 print "cleaning firewall rules"
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 parsedResult = json.loads(x)
	 for i in range(len(parsedResult)):
	  params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
	  command = "/wm/firewall/rules/json"
	  url = "%s:8080" % self.controllerIp
	  connection = httplib.HTTPConnection(url)
	  connection.request("DELETE", command, params)
	  x = connection.getresponse().read()
	  print ("Rule deleted" in x)
	  # sleep to time out previous flows in switches
	  time.sleep(5)
	  # Test REST rules, empty
	 command = "http://%s:8080/wm/firewall/rules/json" % 		 self.controllerIp
	 x = urllib.urlopen(command).read()
	 print("[]" in x)
	 #print x	 

	def CleanUpFirewallRules3(self):
	
	 print "cleanup all Firewall rules"
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 #print("x")	
	 print(x)	
	#if x is not None and "":
	#if x is not None and not :
	 print(self.isNoneOrEmptyOrBlankString(x))
	 label =1	 
	 if self.isNoneOrEmptyOrBlankString(x)==False:
		print("x1")		
		#print(x)
		parsedResult = json.loads(x)
		for i in range(len(parsedResult)):
			params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
			command = "/wm/firewall/rules/json"
			url = "%s:8080" % self.controllerIp
			connection =  httplib.HTTPConnection(url)
			connection.request("DELETE", command, params)
			z=connection.getresponse().read()
			print z
			
			command = "http://%s:8080/wm/firewall/rules/json" % 		self.controllerIp
	 		x = urllib.urlopen(command).read()
			if self.isNoneOrEmptyOrBlankString(x)==False:
		 	 self.goto(1)
	 print "rules after cleaning"
	 command = "http://%s:8080/wm/firewall/rules/json" % 		 self.controllerIp
	 x = urllib.urlopen(command).read()
	 print x
	 #break
        	
	def addFirewallRule(self, dstIP):
		command = "/wm/firewall/rules/json"
		controllerIp='127.0.0.1'
		
		command = "/wm/firewall/rules/json"
	    	url = "%s:8080" % self.controllerIp
	    	connection = httplib.HTTPConnection(url)
		#params = dstIP #"{\"src-ip\":\"10.0.0.3/32\"}"
		#params = "{\"dst-ip\":\%s}" % dstIP 
		#params ="{\"dst-ip\": \"$dstIP\"}"
		params = "{\"dst-ip\":\"10.0.0.3/32\"}"
		#params = "{\"src-ip\":\"10.0.0.3/32\"}"
		connection.request("POST", command, params)
		x=connection.getresponse().read()
		
		#command='curl -X POST -d '{src-ip, 10.0.0.3/32, action, DENY}' http: // 127.0.0.1: 8080 / wm / firewall / rules / json
	 	
		self.CountFirewallRules()
	
	# sleep for REST command to get processed to avoid racing                                                                                       
	#time.sleep(10)
	def CheckCountFirewallRules(self):

	 command = "http://%s:8080/wm/firewall/rules/json" % 		 self.controllerIp
	 x = urllib.urlopen(command).read()
	 if "[]" in x:
          return 0
	 else:
	  return 1
	
	#	command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	#	x = urllib.urlopen(command).read()
         #       print "firewall rules...", x
		
	#	print "len x", len(x)
	#	if self.isNoneOrEmptyOrBlankString(x)==False:
	#	 parsedResult = json.loads(x)
	#	 counter=0
	#	 for i in range(len(parsedResult)):
	#	  counter=counter+1
		#print "firewall rules...", x
	#	return counter
	def CountFirewallRules(self):
		command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
		x = urllib.urlopen(command).read()
		#print "firewall rules...", x
		return x
	def addFirewallRule1(self):
		
		params = "{\"switchid\":\"00:00:00:00:00:00:00:01\"}"
		command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
		urllib.urlopen(command, params).read()
		
		# sleep for REST command to get processed to avoid racing
		time.sleep(5)	
		
		# Post Conditions Validation
		self.assertTrue("enabled" in self.StatusFirewall())	
		self.assertFalse("[]" in self.CountFirewallRules())
		self.assertTrue("[]" in self.CountFlowRules())

	def deleteFirewallRule(self, destIP):
	# cleanup all Firewall rules
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 #print("x")	
	# print(x)	
	#if x is not None and "":
	#if x is not None and not :
	 print(isNoneOrEmptyOrBlankString(x))
	 if isNoneOrEmptyOrBlankString(x)==False:
		print("x1")		
		#print(x)
		parsedResult = json.loads(x)
		for i in range(len(parsedResult)):
			params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
			command = "/wm/firewall/rules/json"
			url = "%s:8080" % self.controllerIp
			connection =  httplib.HTTPConnection(url)
			connection.request("DELETE", command, params)
			connection.getresponse()
	def CleanFirewallRule(self, nw_dst_prefix):
	
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 
	 #print(isNoneOrEmptyOrBlankString(x))
	 if isNoneOrEmptyOrBlankString(x)==False:
	  for rule in rest.get('/wm/firewall/rules/json'):
	    if rule['nw_dst_prefix']== nw_dst_prefix :
		
		#print "xxx...", rule1
		if len(x1) > 2:	
			params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
			command = "/wm/firewall/rules/json"
			url = "%s:8080" % self.controllerIp
			connection =  httplib.HTTPConnection(url)
			connection.request("DELETE", command, params)
			y=connection.getresponse().read()
			#print "yyy...", y	
	def CleanFirewallRule1(self, nw_dst_prefix):
	
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 count=0
	 #print(isNoneOrEmptyOrBlankString(x))
	 if self.isNoneOrEmptyOrBlankString(x)==False:
		
		parsedResult = json.loads(x)
		
		for i in range(len(parsedResult)):
			params = "{\"nw_dst_prefix\":\"%s\"}" % parsedResult[i]['nw_dst_prefix']
			command = "/wm/firewall/rules/json"
			url = "%s:8080" % self.controllerIp
			connection =  httplib.HTTPConnection(url)
			connection.request("GET", command, params)
			x1=connection.getresponse().read()
			rule=json.loads(x)
			print "rule of..", nw_dst_prefix, "will be deleted..", rule, "end rule information"
			count1=0
			
			for el in rule:
			 # params = "{\"ruleid\":\"%s\"}" % 	el['ruleid']
			  print "rule...", count1, "iss", el
			  for key, value in el.items():
			   #print "key is..", key
			   #print "value is...", value
		 	   if str(key)=="ruleid":
			    print "key is..", key
			    ruleIDValue=str(value)
			    print "key ID..", ruleIDValue
			    params = "{\"ruleid\":\"%s\"}" % ruleIDValue
	 		    command = "/wm/firewall/rules/json"
	 		    url = "%s:8080" % self.controllerIp
			    connection =  httplib.HTTPConnection(url)
			    connection.request("DELETE", command, params)
			    y=connection.getresponse().read()
			    print "yyyyyy..", y
			 
			    if y.find('Rule deleted'):
			     print "rule deleted"
			     time.sleep(5)
			  #params = "{\"ruleid\":\"%s\"}" % el[count]
			  #command = "/wm/firewall/rules/json"
			  #url = "%s:8080" % self.controllerIp
			  #connection = httplib.HTTPConnection(url)
			  #connection.request("DELETE", command, params)
		          #x = connection.getresponse().read()
			  #if "Rule deleted" in x:
			   #print el[count], "deleted"
			   count=count+1
			return True
			 #print d
			 #print "rule..", count1, "===", el
			 #count1=count1+1
	
			#for k in range(len(rule)):
			
			 # params = "{\"ruleid\":\"%s\"}" % 	rule[k]['ruleid']
			  #command = "/wm/firewall/rules/json"
			  #url = "%s:8080" % self.controllerIp
			  #connection = httplib.HTTPConnection(url)
			  #connection.request("DELETE", command, params)
		          #x = connection.getresponse().read()
			  #if "Rule deleted" in x:
			   #print rule[k]['ruleid'], "deleted"
	
	#		label =2
		        #if len(x1) > 2:	
	#		params = "{\"ruleid\":\"%s\"}" % rule[i]['ruleid']
	#		command = "/wm/firewall/rules/json"
	#		url = "%s:8080" % self.controllerIp
	#		connection =  httplib.HTTPConnection(url)
	#		connection.request("DELETE", command, params)
	#		y=connection.getresponse().read()
	#		print "yyyyyy..", y
			 
			#if y.find('Rule deleted'):
			 # print "rule deleted"
			 # time.sleep(10)
			#command = "http://%s:8080/wm/firewall/rules/json" % 		#self.controllerIp
	 		#x = urllib.urlopen(command).read()
		        #print "rules after deletion..", x
			#if self.isNoneOrEmptyOrBlankString(x)==False and count==0:
			 #count=1
		 	 #self.goto(2) 
			#return True
	
		
	def EnableFirewall(self):

	 command = "http://%s:8080/wm/firewall/module/enable/json" % self.controllerIp
  	 x = urllib.urlopen(command).read()
	def delete_firewall_rule(self,dstIP):
	 
          ret = self.firewall_rest_call({}, 'DELETE')
          return json.loads(ret[2])
	 
	def get_firewall_rule1(self, dstIP):
         self.firewall_get(dstIP)
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 #print "firewall rules...", x
	 if x.find('DENY'):
	  return 'DENY'
	 elif x.find('ALLOW'):
	  return 'ALLOW'
	def get_firewall_rule(self, dstIP):
         self.firewall_get(dstIP)
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
	 #print "firewall rules...", x
	 if x.find(dstIP):
	  return dstIP
	def add_firewall_ruleDeny(self, dstIP):
	 #print "add firewall rule..., dstIP..", dstIP
	 rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
   # "src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": "DENY"
    }
	 rule2 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "ICMP",
    "dst-ip": dstIP,
    "priority": "500",
    "action": "ALLOW"
    }
	 rule3 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": "DENY"
    }
	 rule4 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "ICMP",
    "dst-ip": dstIP,
    "priority": "500",
    "action": "ALLOW"
    }
	 x=self.firewall_set(rule1)
	 #print "rest..", x
	# x=self.firewall_set(rule2)
	 #print "rest..", x
	 #x=self.firewall_set(rule3)
	 #print "rest..", x
	 #x=self.firewall_set(rule4)
	 #print "rest..", x
	 return x
	def add_firewall_rule(self, dstIP):
	 #print "add firewall rule..., dstIP..", dstIP
	 rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    "src-mac": "00:16:3e:6e:0c:a6",
        "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": "DENY"
    }
	 x=self.firewall_set(rule1)
	 #print "rest..", x
	
	 return x
	def add_firewall_rule4(self, dstIP, srcIP, decision, protocol):
	 #print "add firewall rule..., dstIP..", dstIP
	 if protocol== 'ARP':
	 
	
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    "src-ip": srcIP,
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 elif protocol == 'ICMP':
	  #prot="nw-proto": "ICMP"
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "ICMP",
    "src-ip": srcIP,
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 elif protocol == 'TCP':
	  #prot="nw-proto": "ICMP"
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "TCP",
    "src-ip": srcIP,
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 elif protocol == 'UDP':
	  #prot="nw-proto": "ICMP"
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:01",
    "src-ip": srcIP,
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 x=self.firewall_set(rule1)
	 #print "rest..", x
	
	 return x

	def add_firewall_rule2(self, dstIP, decision):
	 #print "add firewall rule..., dstIP..", dstIP
	 rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 x=self.firewall_set(rule1)
	 #print "rest..", x
	
	 return x

	def add_firewall_rule3(self, dstIP, decision, protocol):
	 #print "add firewall rule..., dstIP..", dstIP
	 if protocol== 'ARP':
	 
	
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 elif protocol == 'ICMP':
	  #prot="nw-proto": "ICMP"
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "ICMP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 elif protocol == 'TCP':
	  #prot="nw-proto": "ICMP"
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "TCP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 elif protocol == 'UDP':
	  #prot="nw-proto": "ICMP"
	  rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "UDP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": decision
    }
	 x=self.firewall_set(rule1)
	 #print "rest..", x
	
	 return x


	def add_firewall_ruleAllow(self, dstIP):
	 #print "add firewall rule..., dstIP..", dstIP
	 rule1 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": "DENY"
    }
	 rule2 = {
        'switchid':"00:00:00:00:00:00:00:02",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "ICMP",
    "dst-ip": dstIP,
    "priority": "500",
    "action": "ALLOW"
    }
	 rule3 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "dl-type": "ARP",
    #"src-ip": "10.0.0.1/24",
    #"dst-ip": "200.0.0.2/24",
     "dst-ip": dstIP,
    "priority": "500",
    "action": "DENY"
    }
	 rule4 = {
        'switchid':"00:00:00:00:00:00:00:01",
    #"src-mac": "00:16:3e:6e:0c:a6",
     #   "dst-mac": "00:16:3e:fa:18:1d",
    "nw-proto": "ICMP",
    "dst-ip": dstIP,
    "priority": "500",
    "action": "ALLOW"
    }
	 #x=self.firewall_set(rule1)
	 #print "rest..", x
	 x=self.firewall_set(rule2)
	 #print "rest..", x
	 #x=self.firewall_set(rule3)
	 #print "rest..", x
	 #x=self.firewall_set(rule4)
	 #print "rest..", x
	 return x
	def firewall_get(self, data):
	 
         ret = self.firewall_rest_call({}, 'GET')
         return json.loads(ret[2])

	def firewall_set(self, data):
	 #print "insert rule ...", data
         ret = self.firewall_rest_call(data, 'POST')
         return ret[0] == 200

        def firewall_remove(self, objtype, data):
         ret = self.firewall_rest_call(data, 'DELETE')
         return ret[0] == 200

        def firewall_rest_call(self, data, action):
	 print "rules before addition"
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
         print "firewall rules...", x
         path = '/wm/firewall/rules/json'
         headers = {
            'Content-type': 'application/json',
            'Accept': 'application/json',
            }
         body = json.dumps(data)
         conn = httplib.HTTPConnection(self.controllerIp, 8080)
         conn.request(action, path, body, headers)
         response = conn.getresponse()
         ret = (response.status, response.reason, response.read())
	 print "rules after addition"
	 command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
	 x = urllib.urlopen(command).read()
         print "firewall rules...", x
         #print ret
         conn.close()
         return ret

	def addFlow2(dstIP, self):

 		defaultPriority = "500"
 		newFlow = {"installInHw":"false"}
 		ingressPort = ingressEdge['edge']['tailNodeConnector']['@id']
 		egressPort = egressEdge['edge']['headNodeConnector']['@id']
 		switchType = egressEdge['edge']['headNodeConnector']['node']['@type']
 		newFlow.update({"name":flowName})
 		newFlow.update({"node":ingressEdge['edge']['tailNodeConnector']['node']})
 		newFlow.update({"ingressPort":ingressPort, "priority":defaultPriority})
 		newFlow.update({"nwSrc":srcIP, "nwDst":dstIP}) # This can probably be ignored for this example
 		newFlow.update({"actions":"OUTPUT=" + egressPort})
 		return newFlow
	def addFlow2(self, dstIP):
	 data = '{"nw_src": "10.0.0.1/32", "nw_dst": dstIP, "nw_proto": "ICMP", "actions": "ALLOW", 		"priority": "500"}'
	 url = 'http://localhost:8080/firewall/rules/0000000000000001'
	 req = urllib2.Request(url, data, {'Content-Type': 'application/json'})
	 f = urllib2.urlopen(req)
	 command="curl -s http://%s//wm/staticflowentrypusher/list/all/json| python -mjson.tool" % ('127.0.0.1:8080')
         result = os.popen(command).read()
         parsedResult = json.loads(result)
	 print "inserted flow...", parsedResult
	 #for x in f:
    	  #print(x)
	 f.close()
	

def suite():

    	 suite = unittest.TestSuite()
	 #suite = unittest.TestSuite()
	 #test_parameters = '10.0.0.1','10.0.0.1','TCP', 'Allow'
        # for test_parameter in test_parameters:
         # loadedtests = unittest.TestLoader().loadTestsFromTestCase(FirewallTester_Exp6)
          #for t in loadedtests:
           # t.parameter = test_parameter
          #suite.addTests(loadedtests)

         #suite.addTests(unittest.TestLoader().loadTestsFromTestCase(FirewallTester_Exp6))

    	 suite.addTest(unittest.makeSuite(FirewallTester_Exp10))

    	 return suite
if __name__ == '__main__':
	logging.basicConfig(filename='/tmp/testfirewall.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
	logger=logging.getLogger(__name__)
	#print "setup"
	
	#self.setUp()
	#print "end setup"
	suite = unittest.TestSuite()
	
	unittest.TextTestRunner(verbosity=2).run(suite)


def get_all_flow_stats():
 resp, content = h.request('http://127.0.0.1:8080/controller/nb/v2/statistics/default/flow', "GET")
#print "content ", content
 allFlowStats = json.loads(content)
 flow_stats = allFlowStats['flowStatistics']
 return flow_stats
# Get all flows in a node
def get_all_nodes():
 node_list = get_all_wrapper('/switchmanager/default/nodes', 'nodeProperties')
 return node_list
def get_all_flows_node(nodeid):
 url = 'http://localhost:8080/controller/nb/v2/flowprogrammer/default/node/OF/' + nodeid
 logging.debug('url %s', url)
 resp, content = h.request(url, "GET")
 allFlows = json.loads(content)
 flows = allFlows['flowConfig']
 return flows
def get(self, data):
        path = '/wm/staticflowentrypusher/list/' + data + '/json'
        conn = httplib.HTTPConnection(self.controllerIp, 8080)
        conn.request("GET", path)
        response = conn.getresponse()
        ret = (response.status, response.reason, response.read())
        ret1 = str(ret)
        #print ret1
        x=1
        ret1 = ret1[ret1.find("\":{\"",0)+4:]
        name = ret1[:ret1.find("\"",0)]
        ret1 = ret1[ret1.find("\"port\"",0)-1:]
        outport = ret1[ret1.find(":",0)+1:ret1.find(",",0)]
        ret1 = ret1[ret1.find("\"inputPort\"",0)+11:]
        inport = ret1[1:ret1.find(",")]

        if name == "0, 'OK', '{":
            print "\nNo flows\n"
        else:
        
            print "\n\n"
            #print"Flow "+"1"+": " + name
            #print "Inport: "+inport
            #print "Outport: "+outport
            #print "\n"

            while ret1.find("\"port\"",0) != -1:

                ret2 = ret1[:ret1.find("\":{\"actions",0)]
                name = ret2[ret2.rfind("\"",0)+1:]
                ret1 = ret1[ret1.find("\"port\"",0)-1:]
                outport = ret1[ret1.find(":",0)+1:ret1.find(",",0)]
                ret1 = ret1[ret1.find("\"inputPort\"",0)+11:]
                inport = ret1[1:ret1.find(",")]
                x+=1
                
                #print "Flow "+str(x)+": " + name
                #print "Inport: "+inport
                #print "Outport: "+outport
                #print "\n"


            
        #print ret1
        conn.close()
        return ret
	
